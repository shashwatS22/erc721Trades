// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transfers {
    #[prost(message, repeated, tag="1")]
    pub transfers: ::prost::alloc::vec::Vec<Transfer>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transfer {
    /// length-delimited (wire type 2)
    #[prost(string, tag="1")]
    pub evt_tx_hash: ::prost::alloc::string::String,
    /// varint (wire type 0)
    #[prost(uint32, tag="2")]
    pub evt_index: u32,
    /// length-delimited (wire type 2)
    #[prost(message, optional, tag="3")]
    pub evt_block_time: ::core::option::Option<::prost_types::Timestamp>,
    /// varint (wire type 0)
    #[prost(uint64, tag="4")]
    pub evt_block_number: u64,
    /// length-delimited (wire type 2)
    #[prost(string, tag="5")]
    pub from: ::prost::alloc::string::String,
    /// length-delimited (wire type 2)
    #[prost(string, tag="6")]
    pub to: ::prost::alloc::string::String,
    /// length-delimited (wire type 2)
    #[prost(string, tag="8")]
    pub collection_address: ::prost::alloc::string::String,
    /// length-delimited (wire type 2)
    #[prost(string, tag="9")]
    pub token_id: ::prost::alloc::string::String,
    /// varint (wire type 0)
    #[prost(bool, tag="10")]
    pub is_burned: bool,
    /// varint (wire type 0)
    #[prost(bool, tag="11")]
    pub is_minted: bool,
    /// varint (wire type 0)
    #[prost(bool, tag="12")]
    pub is_traded: bool,
    /// varint (wire type 0)
    #[prost(enumeration="Market", tag="13")]
    pub market: i32,
    /// varint (wire type 0)
    #[prost(uint64, tag="14")]
    pub ordinal: u64,
    /// length-delimited (wire type 2)
    #[prost(message, repeated, tag="15")]
    pub transfer_logs: ::prost::alloc::vec::Vec<TransferLog>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Trades {
    #[prost(message, repeated, tag="1")]
    pub trades: ::prost::alloc::vec::Vec<Trade>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Collections {
    #[prost(message, repeated, tag="1")]
    pub collections: ::prost::alloc::vec::Vec<Collection>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Tokens {
    #[prost(message, repeated, tag="1")]
    pub tokens: ::prost::alloc::vec::Vec<Token>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransferLog {
    #[prost(string, tag="1")]
    pub address: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub data: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="3")]
    pub topics: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Trade {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub hash: ::prost::alloc::string::String,
    #[prost(uint64, tag="3")]
    pub block_number: u64,
    #[prost(uint64, tag="4")]
    pub timestamp: u64,
    #[prost(string, tag="5")]
    pub collection_address: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub token_id: ::prost::alloc::string::String,
    #[prost(uint64, tag="7")]
    pub fee: u64,
    #[prost(string, tag="8")]
    pub erc20_token_amount: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub erc20_token_address: ::prost::alloc::string::String,
    #[prost(string, tag="10")]
    pub marketplace_address: ::prost::alloc::string::String,
    #[prost(string, tag="11")]
    pub marketplace_name: ::prost::alloc::string::String,
    #[prost(uint64, tag="12")]
    pub ordinal: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Token {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub collection_address: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub token_id: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub owner: ::prost::alloc::string::String,
    #[prost(uint64, tag="5")]
    pub mint_timestamp: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Collection {
    /// Contract address
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// Total number of tokens
    #[prost(uint64, tag="2")]
    pub token_count: u64,
    /// Total number of unique owners
    #[prost(uint64, tag="3")]
    pub owner_count: u64,
    /// Total number of events
    #[prost(uint64, tag="4")]
    pub event_count: u64,
    /// Creation timestamp
    #[prost(uint64, tag="5")]
    pub creation_timestamp: u64,
    /// Creation block number
    #[prost(uint64, tag="6")]
    pub creation_block: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Erc20s {
    #[prost(message, repeated, tag="1")]
    pub erc20s: ::prost::alloc::vec::Vec<Erc20>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Erc20 {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub address: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Accounts {
    #[prost(message, repeated, tag="1")]
    pub accounts: ::prost::alloc::vec::Vec<Account>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Account {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub address: ::prost::alloc::string::String,
    #[prost(uint64, tag="3")]
    pub token_count: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountBalance {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub collection_id: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub account_id: ::prost::alloc::string::String,
    #[prost(uint64, tag="4")]
    pub token_count: u64,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Market {
    Unknown = 0,
    Wyvern = 1,
    Opensea = 2,
}
impl Market {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Market::Unknown => "UNKNOWN",
            Market::Wyvern => "WYVERN",
            Market::Opensea => "OPENSEA",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "WYVERN" => Some(Self::Wyvern),
            "OPENSEA" => Some(Self::Opensea),
            _ => None,
        }
    }
}
// @@protoc_insertion_point(module)
